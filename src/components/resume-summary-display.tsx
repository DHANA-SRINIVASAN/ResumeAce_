// src/components/resume-summary-display.tsx
"use client";

import React, { useState, useEffect } from 'react';
import type { AnalyzeResumeOutput } from '@/ai/flows/resume-analyzer';
import { generateResumeSummary, type ResumeSummaryOutput } from '@/ai/flows/resume-summary-flow';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { LoadingIndicator } from './loading-indicator';
import { Alert, AlertDescription, AlertTitle } from './ui/alert';
import { BookText, Sparkles, Edit } from 'lucide-react';

interface ResumeSummaryDisplayProps {
  analysisResult: AnalyzeResumeOutput | null;
  triggerAnalysis?: boolean;
}

export function ResumeSummaryDisplay({ analysisResult, triggerAnalysis = false }: ResumeSummaryDisplayProps) {
  const [summaryOutput, setSummaryOutput] = useState<ResumeSummaryOutput | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [analysisPerformed, setAnalysisPerformed] = useState(false);

  const performSummaryGeneration = async () => {
    if (!analysisResult) {
      setError("Resume analysis data is not available. Please analyze your resume first.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setSummaryOutput(null);

    try {
      const resumeTextForSummary = `
        Name: ${analysisResult.name || 'N/A'}
        Contact: ${analysisResult.contactDetails || 'N/A'}
        Skills: ${analysisResult.skills?.join(', ') || 'N/A'}
        Education: ${analysisResult.education || 'N/A'}
        Experience: ${analysisResult.experience || 'N/A'}
        ${analysisResult.projects ? `Projects: ${analysisResult.projects.join('\n')}` : ''}
        Language: ${analysisResult.language || 'N/A'}
      `.trim();

      const result = await generateResumeSummary({ resumeText: resumeTextForSummary });
      setSummaryOutput(result);
      setAnalysisPerformed(true);
    } catch (err) {
      console.error("Error generating resume summary:", err);
      setError(err instanceof Error ? err.message : "An unknown error occurred during summary generation.");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (triggerAnalysis && analysisResult && !analysisPerformed && !isLoading) {
      performSummaryGeneration();
    }
  }, [triggerAnalysis, analysisResult, analysisPerformed, isLoading]);


  if (!analysisResult) {
    return null; 
  }

  return (
    <Card className="shadow-lg mt-8">
      <CardHeader>
        <div className="flex items-center space-x-3">
          <span className="p-2 bg-accent/10 rounded-md text-accent">
            <BookText className="w-7 h-7" />
          </span>
          <div>
            <CardTitle className="text-2xl font-bold text-accent">AI Professional Summary</CardTitle>
            <CardDescription>A concise overview of your resume, generated by AI.</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        {!analysisPerformed && !isLoading && (
          <div className="text-center py-4">
            <p className="text-muted-foreground mb-4">Let AI craft a professional summary from your resume.</p>
            <Button onClick={performSummaryGeneration} disabled={isLoading}>
              {isLoading ? <LoadingIndicator size="sm" text="Generating..." /> : 'Generate Summary'}
            </Button>
          </div>
        )}

        {isLoading && <LoadingIndicator text="Generating summary..." />}

        {error && (
          <Alert variant="destructive" className="mt-4">
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {summaryOutput && !isLoading && (
          <div className="mt-4 space-y-4">
            <Card className="bg-card border-border/50 shadow-inner">
              <CardContent className="p-4">
                <p className="text-md text-foreground/90 leading-relaxed whitespace-pre-wrap">{summaryOutput.summary}</p>
              </CardContent>
            </Card>
            <Button onClick={performSummaryGeneration} variant="outline" size="sm" disabled={isLoading}>
              {isLoading ? <LoadingIndicator size="xs" text="Regenerating..." /> : <><Sparkles className="w-4 h-4 mr-2" /> Regenerate Summary</>}
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
